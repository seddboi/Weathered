{"version":3,"sources":["Components/Recent Searches/recentSearches.js","Components/Hourly/hourly.js","Components/Day Card/daycard.js","Components/5 Day Forecast/fiveday.js","Components/Overview/overview.js","App.js","index.js"],"names":["RecentSearches","getSearch","useState","city","setCity","recents","setRecents","onSubmit","e","preventDefault","newSearch","includes","prev","addRecent","alert","onChange","target","value","searchAgain","recent","innerHTML","length","id","className","htmlFor","type","placeholder","map","entry","index","onClick","Hourly","forecast","hourlyFC","currentHour","Date","location","localtime_epoch","getHours","updated","forecastday","hour","temp_f","slice","hours","updatedTimes","newCurrentHour","i","push","zippedHours","gatherHourlyFC","name","region","alt","current","condition","text","src","icon","num","epoch","wordDay","getDay","dayNum","getDate","wordMonth","getMonth","year","getFullYear","epochToDateString","feelslike_f","day","maxtemp_f","mintemp_f","daily_chance_of_rain","uv","temperature","Daycard","data","convertedDate","date","toLocaleDateString","timeZone","wicon","wicon_text","max_temp","min_temp","chance_of_rain","Fiveday","dataone","date_epoch","datatwo","axios","require","Overview","setForecast","searchedCity","a","options","method","url","params","request","then","response","console","log","catch","error","fetchForecast","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.058546a0.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './recentSearches.css';\nimport 'animate.css';\n// import $ from 'jquery';\n\nexport function RecentSearches({getSearch}) {\n    const [city, setCity] = useState('');\n    const [recents, setRecents] = useState([]);\n\n    const onSubmit = e => {\n        e.preventDefault();\n        \n        if (!city || city === '') {\n            alert('Please enter a valid city.');\n            return;\n        } else {\n            addRecent(city);\n            getSearch(city);\n        }  \n\n    }\n \n    const onChange = (e) => {\n        setCity(e.target.value);\n    }; \n\n    // function which takes in searched entry and adds entry to recent searches array\n    function addRecent(newSearch) {\n        if (recents.includes(newSearch)) {\n            return;\n        } else {\n            setRecents((prev) => [newSearch, ...prev]);\n        }\n        // clear our search bar entry\n        setCity('');\n    }; \n\n    const searchAgain = (e) => {\n        const recent = e.target.innerHTML;\n        setCity(recent);\n        onSubmit(e);\n    }\n\n    if (recents.length === 0 ) {\n        return (\n            <section id='before-recents' className='before-search-bar-recents' >\n                <form onSubmit={onSubmit} >\n                    <label className=\"form-label\" htmlFor=\"search-bar\">Search A City</label><br/>\n                    <input className='form-text' id=\"search-bar\" type='text' value={city} placeholder=\"Las Vegas, etc.\" onChange={onChange}/>\n                    <input className='form-button' id='search-button' type='submit' value='Search'/>\n                </form>\n        </section>\n        )\n    }  \n    \n    return (\n        <section className='after-search-bar-recents animate__animated animate__fadeInLeft'>\n            <h3 className='title'>Recents</h3>\n            <div id='insert-recent-buttons' >{recents.map((entry, index) => <button className='entry' key={index} onClick={searchAgain} >{entry}</button>)}</div>\n\n            <form className='form'onSubmit={onSubmit} >\n                <label className=\"form-label\" htmlFor=\"search-bar\">Search A City</label>\n                <input className='form-text' id=\"search-bar\" type='text' value={city} placeholder=\"Las Vegas, etc.\" onChange={onChange}/>\n                <input className='form-button' id='search-button' type='submit' value='Search'/>\n            </form>\n        </section>\n    )\n};","import React from 'react';\nimport './hourly.css';\nimport 'animate.css';\n\nexport function Hourly({forecast}) {\n\n    if (forecast === null) {\n        return null;\n    };\n\n    // converts epoch to spelled out date\n    function epochToDateString(num) {\n        const epoch = new Date(forecast.location.localtime_epoch * 1000);\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        var wordDay = days[epoch.getDay()];\n        var dayNum = epoch.getDate();\n        var wordMonth = months[epoch.getMonth()];\n        var year = epoch.getFullYear();\n\n        return `${wordDay}, ${wordMonth} ${dayNum}, ${year} `;\n    };\n\n    function gatherHourlyFC() {\n        const epoch = new Date(forecast.location.localtime_epoch * 1000);\n        var currentHour = epoch.getHours(); //spits out a number 0-23\n        // this grabs the array of times from the forecast state varibale passed in from parent \n        const hourArray = forecast.forecast.forecastday[0].hour.map((entry) => { //each temp will have index that matches currenHour\n            let temp = entry.temp_f;\n            return temp;\n        });\n\n        var updated = hourArray.slice(currentHour, 24);\n\n        const hours = {\n            0: '12:00 AM', \n            1: '1:00 AM',\n            2: '2:00 AM', \n            3: '3:00 AM',\n            4: '4:00 AM', \n            5: '5:00 AM', \n            6: '6:00 AM', \n            7: '7:00 AM', \n            8: '9:00 AM', \n            10: '10:00 AM',\n            11: '11:00 AM', \n            12: '12:00 PM',\n            13: '1:00 PM',\n            14: '2:00 PM', \n            15: '3:00 PM',\n            16: '4:00 PM',\n            17: '5:00 PM',\n            18: '6:00 PM',\n            19: '7:00 PM',\n            20: '8:00 PM',\n            21: '9:00 PM', \n            22: '10:00 PM',\n            23: '11:00 PM',\n            24: '12:00 AM'\n        };\n\n        // this grabs the current hour, adjusts it for the proceeding hourly forecast, then creates the new array, updatedTimes, of string titles\n        var updatedTimes = [];\n        var newCurrentHour = currentHour + 1;\n        for (let i = 0; i < updated.length; i++) {\n            updatedTimes.push(hours[newCurrentHour]);\n            newCurrentHour++;\n        };\n\n        const zippedHours = updated.map((e, i) => {\n            return [e, updatedTimes[i]];\n        });\n\n        return zippedHours;\n    };\n\n    const hourlyFC = gatherHourlyFC();\n\n    return (\n        <section className='flex-grow-1 animate__animated animate__fadeIn' id='forecast'>\n            <h1 className='m-3'><strong id='city-title' className='font-color'>{`${forecast.location.name}, ${forecast.location.region}`}</strong> <img alt={forecast.current.condition.text} id='wicon' src={forecast.current.condition.icon}></img></h1>\n            <h3 id='hourly-date'>Today is <strong className='font-color'>{epochToDateString(forecast.location.localtime_epoch)}</strong>.</h3>\n            <h4>It's currently <strong className='font-color'>{forecast.current.temp_f}°F</strong> and <strong className='font-color'>{forecast.current.condition.text}</strong>.</h4>\n            <h4>It feels like <strong className='font-color'>{forecast.current.feelslike_f}°F</strong>.</h4>\n            <h4>There is a current high temperature of <strong className='font-color'>{forecast.forecast.forecastday[0].day.maxtemp_f}°F</strong>,</h4>\n            <h4>And there is a current low temperature of <strong className='font-color'>{forecast.forecast.forecastday[0].day.mintemp_f}°F</strong>.</h4>\n            <h4>The chance of it raining is <strong className='font-color'>{forecast.forecast.forecastday[0].day.daily_chance_of_rain}%</strong>.</h4>\n            <h4>The UV Index is a <strong className='font-color'>{forecast.current.uv} out of 10</strong>.</h4>\n            <table className='hourly-forecast'>\n                <tbody>\n                    <tr>\n                        {hourlyFC.map((temperature, index) => (\n                        <td className='hours' key={index}>\n                            <h4>{temperature[0]}</h4>\n                            <p>{temperature[1]}</p>\n                        </td>\n                        ))}\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n};","import React from 'react';\nimport './daycard.css';\n\nexport function Daycard({data}) {\n    const myDate = new Date(data.date * 1000);\n    const convertedDate = myDate.toLocaleDateString(\"en-US\", {timeZone: 'UTC'});\n    \n    return (\n        <div className='mini-card'>\n            <h4 id='plug-in-date'>{convertedDate}</h4>\n            <img id='weather-icon' src={data.wicon} alt={data.wicon_text}></img>\n            <h5 className=\"card-text\">Max Temp: <span className='bold-text'>{data.max_temp} °F</span></h5>\n            <h5 className=\"card-text\">Min Temp: <span className='bold-text'>{data.min_temp} °F</span></h5>\n            <h5 className=\"card-text\">Chance Of Rain: <span className='bold-text'>{data.chance_of_rain} %</span></h5>\n        </div>\n    )\n};","import React from 'react';\nimport './fiveday.css';\nimport 'animate.css';\n\nimport {Daycard} from '../Day Card/daycard';\n\nexport function Fiveday({forecast}) {\n\n    if (forecast == null) {\n        return null;\n    };\n\n    const dataone = {\n        date: forecast.forecast.forecastday[1].date_epoch,\n        max_temp: forecast.forecast.forecastday[1].day.maxtemp_f,\n        min_temp: forecast.forecast.forecastday[1].day.mintemp_f,\n        chance_of_rain: forecast.forecast.forecastday[1].day.daily_chance_of_rain,\n        wicon: forecast.forecast.forecastday[1].day.condition.icon,\n        wicon_text: forecast.forecast.forecastday[1].day.condition.text,\n    };\n\n    const datatwo = {\n        date: forecast.forecast.forecastday[2].date_epoch,\n        max_temp: forecast.forecast.forecastday[2].day.maxtemp_f,\n        min_temp: forecast.forecast.forecastday[2].day.mintemp_f,\n        chance_of_rain: forecast.forecast.forecastday[2].day.daily_chance_of_rain,\n        wicon: forecast.forecast.forecastday[2].day.condition.icon,\n        wicon_text: forecast.forecast.forecastday[2].day.condition.text,\n    }\n\n    return (\n        <div className='jumbotron animate__animated animate__fadeIn' id='five-day-section'>\n            <h3 className='three-day-title'>Next Couple of Days</h3>\n\n            <div className='container-fluid' id='five-day-forecast'>\n                <Daycard data={dataone} />\n                <Daycard data={datatwo} />\n            </div>\n        </div>\n    )\n};","import React, {useState} from 'react';\nimport './overview.css';\nimport { RecentSearches } from '../Recent Searches/recentSearches';\nimport { Hourly } from '../Hourly/hourly';\nimport { Fiveday } from '../5 Day Forecast/fiveday';\nimport 'animate.css';\n\nconst axios = require('axios'); \n\nexport function Overview() {\n    const [forecast, setForecast] = useState(null);\n\n    // this callback function receives the searched city entered from recentSearches and applies it to fetchForecast\n    const getSearch = (searchedCity) => {\n        fetchForecast(searchedCity);\n    }; \n\n    async function fetchForecast(searchedCity) {\n\n        const options = {\n            method: 'GET',\n            url: 'https://weathrd.herokuapp.com/forecast',\n            params: {city: searchedCity}\n        };\n\n        axios.request(options).then((response) => {\n            console.log(response.data);\n            setForecast(response.data);\n        }).catch((error) => {\n            console.log(error);\n        })\n        \n    };  \n    \n    return (\n        <div>\n            <div className='jumbotron' id='heading-title'>\n                <h1>Welcome to <strong>Weathered</strong>!</h1>\n                <h3>A Simple Weather Dashboard </h3>\n            </div>\n\n            <div className='container-fluid' id='homepage-skeleton'>\n                <div className='d-flex' id='center-page'>\n                    <RecentSearches getSearch={getSearch}/>\n\n                    <Hourly forecast={forecast}/>\n                </div>\n            </div>\n\n            <Fiveday forecast={forecast}/>        \n        </div>\n    )\n};\n\n","import React from 'react';\nimport './App.css';\n\nimport {Overview} from './Components/Overview/overview.js';\n\nfunction App() {\n  return (\n    <div>\n      <Overview />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}